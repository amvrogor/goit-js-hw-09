{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEcC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBACvBD,SAASC,cAAc,yBA2BtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IApCMJ,SAASC,cAAc,SAE/BY,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAEC,iBAKF,IAJA,IAAIC,EAAQF,EAAEG,cAAcC,SAAS,GAAGC,MACpCC,EAAON,EAAEG,cAAcC,SAAS,GAAGC,MACnCE,EAAWP,EAAEG,cAAcC,SAAS,GAAGC,MAElCG,EAAI,EAAGA,EAAID,EAAUC,GAAK,EACjCpB,EAAcoB,EAAGF,EAAOE,EAAIN,GACzBO,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUsB,EAAKD,EAALZ,MACjBc,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAGrB,EAAQqB,EAARrB,SAAU4B,EAAKP,EAALZ,MAClBc,EAAA5B,GAAS6B,OAAOK,QACd,sBAAqCH,OAAf1B,EAAS,QAAY0B,OAANE,EAAM,M,IAInDjB,EAAEG,cAAcgB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst submit = document.querySelector('button[type=\"submit\"]');\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  let delay = e.currentTarget.elements[0].value;\n  let step = e.currentTarget.elements[1].value;\n  let position = e.currentTarget.elements[2].value;\n\n  for (let i = 0; i < position; i += 1) {\n    createPromise(i, step * i + delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay4","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","preventDefault","delay1","currentTarget","elements","value","step1","position1","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","reset"],"version":3,"file":"03-promises.e43b1623.js.map"}